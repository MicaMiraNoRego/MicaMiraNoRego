import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.HashSet;
import java.util.Set;

public class TreeChopperPlugin extends JavaPlugin implements Listener {

    @Override
    public void onEnable() {
        getServer().getPluginManager().registerEvents(this, this);
        getLogger().info("TreeChopperPlugin habilitado!");
    }

    @Override
    public void onDisable() {
        getLogger().info("TreeChopperPlugin desabilitado!");
    }

    @EventHandler
    public void onBlockBreak(BlockBreakEvent event) {
        Block block = event.getBlock();
        if (block.getType() == Material.OAK_LOG) {
            chopTree(block);
        }
    }

    private void chopTree(Block block) {
        Set<Block> blocksToChop = new HashSet<>();
        collectLogs(block, blocksToChop);

        for (Block log : blocksToChop) {
            log.breakNaturally();
        }
    }

    private void collectLogs(Block block, Set<Block> blocksToChop) {
        if (!blocksToChop.contains(block) && block.getType() == Material.OAK_LOG) {
            blocksToChop.add(block);
            for (Block relative : getAdjacentBlocks(block)) {
                collectLogs(relative, blocksToChop);
            }
        }
    }

    private Set<Block> getAdjacentBlocks(Block block) {
        Set<Block> adjacentBlocks = new HashSet<>();
        for (int x = -1; x <= 1; x++) {
            for (int y = -1; y <= 1; y++) {
                for (int z = -1; z <= 1; z++) {
                    if (x == 0 && y == 0 && z == 0) continue;
                    adjacentBlocks.add(block.getRelative(x, y, z));
                }
            }
        }
        return adjacentBlocks;
    }
}
